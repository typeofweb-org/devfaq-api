/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface definitions {
  Model1: {
    id: number;
    question: string;
    _categoryId: 'html' | 'css' | 'js' | 'angular' | 'react' | 'git' | 'other';
    _levelId: 'junior' | 'mid' | 'senior';
    _statusId: 'accepted' | 'pending';
    acceptedAt?: string;
    votesCount: number;
    currentUserVotedOn?: boolean;
  };
  data: definitions['Model1'][];
  meta: { total: number };
  Model2: { data: definitions['data']; meta?: definitions['meta'] };
  _user: {
    id: number;
    email: string;
    createdAt: string;
    updatedAt: string;
    _roleId: string;
    firstName?: string;
    lastName?: string;
    socialLogin?: string;
  };
  Model3: {
    keepMeSignedIn: boolean;
    validUntil: string;
    createdAt: string;
    updatedAt: string;
    version: number;
    _userId: number;
    _user: definitions['_user'];
  };
  Model4: { data: definitions['Model3'] };
  Model5: { data: definitions['Model1'] };
  Model6: { _userId: number; _questionId: number };
  Model7: { data: definitions['Model6'] };
  Model8: {
    question: string;
    level: 'junior' | 'mid' | 'senior';
    category: 'html' | 'css' | 'js' | 'angular' | 'react' | 'git' | 'other';
  };
  Model9: {
    question: string;
    level: 'junior' | 'mid' | 'senior';
    category: 'html' | 'css' | 'js' | 'angular' | 'react' | 'git' | 'other';
    status: 'accepted' | 'pending';
  };

  /**
   * @summary Health check endpoint default Successful response
   */
  getHealthcheckDefaultResponse: string;

  /**
   * @summary Test endpoint default Successful response
   */
  getHelloworldDefaultResponse: string;
  getQuestionsRequestQuery: {
    category?: 'html' | 'css' | 'js' | 'angular' | 'react' | 'git' | 'other';
    status?: 'accepted' | 'pending';
    level?: ('mid' | 'senior' | 'junior')[];
    limit?: number;
    offset?: number;
    orderBy?: 'acceptedAt' | 'level' | 'votesCount';
    order?: 'asc' | 'desc';
  };

  /**
   * @summary Returns questions 200 Successful response
   */
  getQuestions200Response: definitions['Model2'];
  postQuestionsRequestBody: definitions['Model8'];

  /**
   * @description When user is not an admin, it won't publish the question
   * @summary Creates a question 200 Successful response
   */
  postQuestions200Response: definitions['Model5'];

  getOauthGithubDefaultResponse: string;

  postOauthGithubDefaultResponse: string;

  getOauthMe200Response: definitions['Model4'];
  getQuestionsIdRequestPathParams: {
    id: number;
  };

  /**
   * @summary Returns one question 200 Successful response
   */
  getQuestionsId200Response: definitions['Model5'];
  patchQuestionsIdRequestPathParams: {
    id: number;
  };
  patchQuestionsIdRequestBody: definitions['Model9'];

  /**
   * @summary Updates a question 200 Successful response
   */
  patchQuestionsId200Response: definitions['Model5'];
  deleteQuestionsIdRequestPathParams: {
    id: number;
  };

  /**
   * @summary Deletes one question default Successful response
   */
  deleteQuestionsIdDefaultResponse: string;
  postQuestionvotesRequestQuery: {
    _userId: number;
    _questionId: number;
  };

  /**
   * @summary Votes on a question 200 Successful response
   */
  postQuestionvotes200Response: definitions['Model7'];
  deleteQuestionvotesRequestQuery: {
    _userId: number;
    _questionId: number;
  };

  /**
   * @summary Votes on a question default Successful response
   */
  deleteQuestionvotesDefaultResponse: string;

  postOauthLogoutDefaultResponse: string;
}
