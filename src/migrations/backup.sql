CREATE TABLE IF NOT EXISTS "PaymentType" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'PaymentType' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "AccountingData" ("id"   SERIAL , "info" JSON, "notes" TEXT, "_paymentTypeId" INTEGER REFERENCES "PaymentType" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'AccountingData' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "ShirtSize" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ShirtSize' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "UserRole" ("id"   SERIAL , "name" TEXT UNIQUE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'UserRole' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Currency" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Currency' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "User" ("id"   SERIAL , "email" TEXT NOT NULL UNIQUE, "displayName" TEXT NOT NULL, "lastLoginAt" TIMESTAMP WITH TIME ZONE, "slackId" TEXT, "firebaseId" TEXT, "isActive" BOOLEAN, "avatarUrl" TEXT, "shippingAddress" TEXT, "rate" DOUBLE PRECISION, "tax" DOUBLE PRECISION, "_shirtSizeId" INTEGER REFERENCES "ShirtSize" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_roleId" INTEGER NOT NULL REFERENCES "UserRole" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_accountingDataId" INTEGER REFERENCES "AccountingData" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_currencyId" INTEGER NOT NULL REFERENCES "Currency" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'User' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "QuestionType" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'QuestionType' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "QuestionStatus" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'QuestionStatus' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Question" ("id"   SERIAL , "isRequired" BOOLEAN, "isActive" BOOLEAN, "addedAt" TIMESTAMP WITH TIME ZONE, "title" TEXT, "text" TEXT, "order" INTEGER, "firebaseId" TEXT, "_userId" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_typeId" INTEGER REFERENCES "QuestionType" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_statusId" INTEGER REFERENCES "QuestionStatus" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Question' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "InvoiceStatus" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'InvoiceStatus' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Invoice" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE, "dateFrom" TIMESTAMP WITH TIME ZONE, "dateTo" TIMESTAMP WITH TIME ZONE, "number" INTEGER NOT NULL, "_userId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "firebaseId" TEXT, "_accountingDataId" INTEGER REFERENCES "AccountingData" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_statusId" INTEGER REFERENCES "InvoiceStatus" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_currencyId" INTEGER REFERENCES "Currency" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Invoice' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
CREATE UNIQUE INDEX IF NOT EXISTS "invoice__user_id_number" ON "Invoice" ("_userId", "number");

CREATE TABLE IF NOT EXISTS "Answer" ("id"   SERIAL , "value" TEXT, "_questionId" INTEGER REFERENCES "Question" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_invoiceId" INTEGER REFERENCES "Invoice" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_userId" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Answer' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "ProjectStatus" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ProjectStatus' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Project" ("id"   SERIAL , "name" TEXT, "contractCode" TEXT NOT NULL UNIQUE, "firebaseId" TEXT, "_adminId" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_statusId" INTEGER REFERENCES "ProjectStatus" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Project' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "AssignmentStatus" ("id"   SERIAL , "status" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'AssignmentStatus' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Assignment" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE, "rate" DOUBLE PRECISION, "tax" DOUBLE PRECISION, "startDate" TIMESTAMP WITH TIME ZONE, "endDate" TIMESTAMP WITH TIME ZONE, "isActive" BOOLEAN, "_userId" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_projectId" INTEGER REFERENCES "Project" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_statusId" INTEGER REFERENCES "AssignmentStatus" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Assignment' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "BountiesPathType" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'BountiesPathType' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "BountiesPathLevel" ("id"   SERIAL , "_userId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "_pathTypeId" INTEGER NOT NULL REFERENCES "BountiesPathType" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "bountiesCount" INTEGER, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'BountiesPathLevel' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Bounty" ("id"   SERIAL , "coinValue" INTEGER, "title" TEXT, "emoji" TEXT, "channel" TEXT, "club" TEXT, "season" INTEGER, "description" TEXT, "charityInformation" TEXT, "isBoss" BOOLEAN, "requiredBountiesAmount" DOUBLE PRECISION, "isActive" BOOLEAN, "expirationDate" TIMESTAMP WITH TIME ZONE, "addedAt" TIMESTAMP WITH TIME ZONE, "coverImage" JSON, "_pathId" INTEGER NOT NULL REFERENCES "BountiesPathType" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "_addedById" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Bounty' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "InvoiceCategory" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'InvoiceCategory' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "InvoiceItem" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE, "notes" TEXT, "name" TEXT, "quantity" DOUBLE PRECISION, "usdPrice" DOUBLE PRECISION, "rate" DOUBLE PRECISION, "tax" DOUBLE PRECISION, "type" TEXT, "approvedAt" TIMESTAMP WITH TIME ZONE, "files" JSON, "_invoiceId" INTEGER REFERENCES "Invoice" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_categoryId" INTEGER REFERENCES "InvoiceCategory" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_statusId" INTEGER REFERENCES "InvoiceStatus" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_projectId" INTEGER REFERENCES "Project" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_approvedById" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'InvoiceItem' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "News" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "text" TEXT NOT NULL, "isActive" BOOLEAN NOT NULL, "_userId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'News' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Rarity" ("id"   SERIAL , "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Rarity' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "ReactionType" ("id"   SERIAL , "name" TEXT, "value" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'ReactionType' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Session" ("id" UUID , "validUntil" TIMESTAMP WITH TIME ZONE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "_userId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Session' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "Settings" ("id"   SERIAL , "values" JSON, "name" TEXT, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Settings' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "TransactionOperation" ("id"   SERIAL , "name" TEXT UNIQUE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'TransactionOperation' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "TransactionHistory" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "reason" TEXT, "amount" DOUBLE PRECISION, "_grantedToId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, "_operationId" INTEGER REFERENCES "TransactionOperation" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_grantedById" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_bountyId" INTEGER REFERENCES "Bounty" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'TransactionHistory' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "UnlockedBounty" ("id"   SERIAL , "addedAt" TIMESTAMP WITH TIME ZONE, "comment" TEXT, "_bountyId" INTEGER REFERENCES "Bounty" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_grantedToId" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "_grantedById" INTEGER REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'UnlockedBounty' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "VaultItem" ("id"   SERIAL , "itemName" TEXT NOT NULL, "description" TEXT NOT NULL, "image" JSON, "formUrl" TEXT NOT NULL, "stock" INTEGER NOT NULL, "coinPrice" INTEGER NOT NULL, "order" INTEGER NOT NULL, "isActive" BOOLEAN NOT NULL, "isSingleItem" BOOLEAN NOT NULL, "_rarityId" INTEGER REFERENCES "Rarity" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'VaultItem' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

CREATE TABLE IF NOT EXISTS "VaultItemPurchase" ("id"   SERIAL , "_vaultItemId" INTEGER NOT NULL REFERENCES "VaultItem" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "_buyerId" INTEGER NOT NULL REFERENCES "User" ("id") ON DELETE NO ACTION ON UPDATE CASCADE, PRIMARY KEY ("id"));
SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'VaultItemPurchase' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
